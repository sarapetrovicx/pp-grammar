
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 07 14:26:00 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 07 14:26:00 CET 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\010\000\002\002\004\000\002\002" +
    "\010\000\002\002\006\000\002\002\010\000\002\002\010" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\006\004\000\002\006\003\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\022\005\000\002\022\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\004\004\000\002" +
    "\004\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\006\000\002\014\005\000\002\014\004\000" +
    "\002\010\007\000\002\010\007\000\002\010\007\000\002" +
    "\010\006\000\002\010\007\000\002\011\007\000\002\011" +
    "\007\000\002\011\006\000\002\011\007\000\002\011\007" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\004\000\002\015\010\000" +
    "\002\015\010\000\002\015\007\000\002\015\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\004\005\001\002\000\004\002\203\001" +
    "\002\000\006\003\006\033\007\001\002\000\004\011\177" +
    "\001\002\000\006\003\010\011\011\001\002\000\006\003" +
    "\173\005\012\001\002\000\006\003\013\005\012\001\002" +
    "\000\006\003\166\027\167\001\002\000\006\002\ufffe\027" +
    "\140\001\002\000\004\013\016\001\002\000\006\003\136" +
    "\012\137\001\002\000\020\003\032\013\016\015\027\016" +
    "\021\017\030\022\017\036\031\001\002\000\012\003\125" +
    "\025\045\036\037\037\040\001\002\000\024\003\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7" +
    "\036\uffe7\001\002\000\006\003\112\025\113\001\002\000" +
    "\022\003\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\022\uffe8\036\uffe8\001\002\000\024\003\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\036\uffe4" +
    "\001\002\000\024\003\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\022\uffe3\036\uffe3\001\002\000\022" +
    "\003\110\013\016\014\111\015\027\016\021\017\030\022" +
    "\017\036\031\001\002\000\024\003\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\036\uffe5\001" +
    "\002\000\006\003\074\025\075\001\002\000\010\025\045" +
    "\036\037\037\040\001\002\000\006\003\035\030\036\001" +
    "\002\000\026\003\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\021\uffea\022\uffea\036\uffea\001\002\000" +
    "\024\003\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\036\uffe2\001\002\000\024\003\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6" +
    "\036\uffe6\001\002\000\024\003\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf\036\uffdf\001\002" +
    "\000\012\003\042\025\045\036\037\037\040\001\002\000" +
    "\016\003\uffca\020\uffca\023\uffca\024\uffca\026\uffca\031\uffca" +
    "\001\002\000\016\003\uffc9\020\uffc9\023\uffc9\024\uffc9\026" +
    "\uffc9\031\uffc9\001\002\000\016\003\uffcb\020\uffcb\023\uffcb" +
    "\024\uffcb\026\uffcb\031\uffcb\001\002\000\024\003\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0" +
    "\036\uffe0\001\002\000\016\003\uffce\020\uffce\023\uffce\024" +
    "\055\026\uffce\031\uffce\001\002\000\006\023\052\031\060" +
    "\001\002\000\012\003\046\025\045\036\037\037\040\001" +
    "\002\000\016\003\uffc6\020\uffc6\023\uffc6\024\uffc6\026\uffc6" +
    "\031\uffc6\001\002\000\010\003\051\023\052\026\050\001" +
    "\002\000\016\003\uffc8\020\uffc8\023\uffc8\024\uffc8\026\uffc8" +
    "\031\uffc8\001\002\000\016\003\uffc7\020\uffc7\023\uffc7\024" +
    "\uffc7\026\uffc7\031\uffc7\001\002\000\012\003\053\025\045" +
    "\036\037\037\040\001\002\000\014\003\uffcf\020\uffcf\023" +
    "\uffcf\026\uffcf\031\uffcf\001\002\000\016\003\uffd0\020\uffd0" +
    "\023\uffd0\024\055\026\uffd0\031\uffd0\001\002\000\012\003" +
    "\057\025\045\036\037\037\040\001\002\000\016\003\uffcd" +
    "\020\uffcd\023\uffcd\024\uffcd\026\uffcd\031\uffcd\001\002\000" +
    "\016\003\uffcc\020\uffcc\023\uffcc\024\uffcc\026\uffcc\031\uffcc" +
    "\001\002\000\024\003\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\036\uffe1\001\002\000\010" +
    "\003\063\020\062\023\052\001\002\000\016\013\016\015" +
    "\027\016\021\017\030\022\017\036\031\001\002\000\016" +
    "\013\016\015\027\016\021\017\030\022\017\036\031\001" +
    "\002\000\004\021\065\001\002\000\016\013\016\015\027" +
    "\016\021\017\030\022\017\036\031\001\002\000\024\003" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2" +
    "\022\uffc2\036\uffc2\001\002\000\006\003\071\021\070\001" +
    "\002\000\020\003\073\013\016\015\027\016\021\017\030" +
    "\022\017\036\031\001\002\000\024\003\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\036\uffc3" +
    "\001\002\000\024\003\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\021\uffc5\022\uffc5\036\uffc5\001\002\000\024" +
    "\003\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021" +
    "\uffc4\022\uffc4\036\uffc4\001\002\000\004\036\104\001\002" +
    "\000\004\036\076\001\002\000\006\003\100\026\077\001" +
    "\002\000\006\003\102\031\103\001\002\000\026\003\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022" +
    "\uffdb\031\101\036\uffdb\001\002\000\024\003\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\036" +
    "\uffdd\001\002\000\024\003\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\022\uffdc\036\uffdc\001\002\000" +
    "\024\003\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\021\uffde\022\uffde\036\uffde\001\002\000\004\026\105\001" +
    "\002\000\004\031\106\001\002\000\024\003\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\036" +
    "\uffda\001\002\000\022\003\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\022\uffe9\036\uffe9\001\002\000\026\003" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\036\uffeb\001\002\000\026\003\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\022\uffec\036\uffec\001\002\000\010\025\045\036\037\037" +
    "\040\001\002\000\010\025\045\036\037\037\040\001\002" +
    "\000\010\003\116\023\052\026\115\001\002\000\006\003" +
    "\120\031\121\001\002\000\026\003\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\031\117\036" +
    "\uffd7\001\002\000\024\003\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\022\uffd8\036\uffd8\001\002\000" +
    "\024\003\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\022\uffd6\036\uffd6\001\002\000\024\003\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9" +
    "\036\uffd9\001\002\000\006\023\052\026\123\001\002\000" +
    "\004\031\124\001\002\000\024\003\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\036\uffd5\001" +
    "\002\000\004\020\134\001\002\000\010\003\130\020\127" +
    "\023\052\001\002\000\020\003\133\013\016\015\027\016" +
    "\021\017\030\022\017\036\031\001\002\000\016\013\016" +
    "\015\027\016\021\017\030\022\017\036\031\001\002\000" +
    "\024\003\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\036\uffd3\001\002\000\024\003\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\036\uffd4\001\002\000\024\003\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\036\uffd2\001\002" +
    "\000\016\013\016\015\027\016\021\017\030\022\017\036" +
    "\031\001\002\000\024\003\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\021\uffd1\022\uffd1\036\uffd1\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\012" +
    "\003\141\006\147\007\146\010\145\001\002\000\004\034" +
    "\163\001\002\000\006\003\152\034\151\001\002\000\014" +
    "\003\141\006\147\007\146\010\145\013\ufff9\001\002\000" +
    "\014\003\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\001\002" +
    "\000\006\003\uffed\034\uffed\001\002\000\006\003\uffee\034" +
    "\uffee\001\002\000\006\003\uffef\034\uffef\001\002\000\014" +
    "\003\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7\001\002\000" +
    "\004\036\153\001\002\000\004\036\153\001\002\000\010" +
    "\003\ufff0\031\ufff0\032\ufff0\001\002\000\006\031\156\032" +
    "\155\001\002\000\004\036\157\001\002\000\014\003\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\013\ufff4\001\002\000\010\003" +
    "\ufff1\031\ufff1\032\ufff1\001\002\000\010\003\161\031\162" +
    "\032\155\001\002\000\014\003\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\013\ufff3\001\002\000\014\003\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\013\ufff5\001\002\000\004\036\153\001\002\000" +
    "\006\031\165\032\155\001\002\000\014\003\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\013\ufff2\001\002\000\012\003\141\006" +
    "\147\007\146\010\145\001\002\000\012\003\170\006\147" +
    "\007\146\010\145\001\002\000\006\013\ufff8\034\163\001" +
    "\002\000\014\003\141\006\147\007\146\010\145\013\ufffb" +
    "\001\002\000\014\003\141\006\147\007\146\010\145\013" +
    "\ufffa\001\002\000\004\027\140\001\002\000\004\013\016" +
    "\001\002\000\004\012\176\001\002\000\004\002\ufffc\001" +
    "\002\000\006\003\173\005\012\001\002\000\004\013\016" +
    "\001\002\000\004\012\202\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\173\001\001\000\004\005\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\014\001\001\000\002" +
    "\001\001\000\022\003\033\004\024\010\022\011\023\012" +
    "\032\013\021\014\017\015\025\001\001\000\010\016\125" +
    "\017\042\020\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\033\010\022\011\023\012\032\013\106\014" +
    "\017\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\060\017\042\020\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\043\017\042\020\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\046\017\042\020\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\053\020\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\033\010\022\011\023\012\032\013\066\014\017\015" +
    "\025\001\001\000\020\003\033\010\022\011\023\012\032" +
    "\013\063\014\017\015\025\001\001\000\002\001\001\000" +
    "\020\003\033\010\022\011\023\012\032\013\065\014\017" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\033\010\022\011\023\012\032\013\071\014\017" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\121\017\042" +
    "\020\040\001\001\000\010\016\113\017\042\020\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\033\010\022\011" +
    "\023\012\032\013\131\014\017\015\025\001\001\000\020" +
    "\003\033\010\022\011\023\012\032\013\130\014\017\015" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\033\010\022\011\023\012\032\013" +
    "\134\014\017\015\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\142\007\143\021" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\147\021\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\157\001\001\000\004\022\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\171\007\143\021" +
    "\141\001\001\000\010\006\170\007\143\021\141\001\001" +
    "\000\002\001\001\000\006\007\147\021\141\001\001\000" +
    "\006\007\147\021\141\001\001\000\002\001\001\000\004" +
    "\003\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\177\001\001\000\004\003\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      public int errNo = 0;

      public static void main( String[] args )
      {
         try
   	  {
   		   FileReader file = new FileReader( "src/main/java/primer3.txt" );
   		   Scanner scanner = new MPLexer( file );
   		   parser parser = new parser( scanner );
   		   parser.parse();
   		   if ( parser.errNo == 0 )
   		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
   		   else
   		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
   	  }
   	  catch( Exception e )
   	  {
   		   System.out.println(e);
   	  }
      }

      public void syntax_error(Symbol cur_token)
      {

      }

      public void report_error(String message, Object info)
      {
      	   System.out.print( message );
      }

      public int getLine()
      {
      	  return (( MPLexer) getScanner()).getLine();
      }
 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfNar ::= IF Izraz error Naredba ELSE Naredba 
            {
              Object RESULT =null;
		
                         System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje kljucna rec 'do'.");
                         parser.errNo++;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfNar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfNar ::= IF Izraz DO Naredba error 
            {
              Object RESULT =null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
                    "Nedostaje kljucna rec 'else'.");
                   parser.errNo++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfNar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfNar ::= IF Izraz DO Naredba ELSE error 
            {
              Object RESULT =null;
		
                         System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                         	"Nedostaje naredba u 'else' grani.");
                         parser.errNo++;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfNar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfNar ::= IF Izraz DO Naredba ELSE Naredba 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 29." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfNar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FIzraz ::= LEFTPAR error 
            {
              Object RESULT =null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                        "Nekorektan izraz.");
                       parser.errNo++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FIzraz ::= LEFTPAR Izraz error 
            {
              Object RESULT =null;
		
                       System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                        "Nedostaje ')'.");
                       parser.errNo++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FIzraz ::= LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT =null;
		
                          System.out.println( "Redukcija po smeni 26." );
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FIzraz ::= CONST 
            {
              Object RESULT =null;
		
                          System.out.println( "Redukcija po smeni 25." );
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FIzraz ::= ID 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 24." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PIzraz ::= FIzraz 
            {
              Object RESULT =null;
		
              System.out.println( "Redukcija po smeni 24." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PIzraz ::= PIzraz MUL error 
            {
              Object RESULT =null;
		
                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                    "Nekorektan izraz.");
                parser.errNo++;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PIzraz ::= PIzraz MUL FIzraz 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 23." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Izraz ::= PIzraz 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 22.1" );
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Izraz ::= Izraz PLUS error 
            {
              Object RESULT =null;
		
                 System.out.println("Greska u liniji " + parser.getLine() + ": " +
                    "Nekorektan izraz.");
                 parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Izraz ::= Izraz PLUS PIzraz 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 22." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Petlja ::= WHILE error DO Naredba 
            {
              Object RESULT =null;
		
               System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                   "Nedostaje 'izraz'.");
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Petlja",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Petlja ::= WHILE Izraz DO error 
            {
              Object RESULT =null;
		
               System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                   "Nedostaje 'naredba'.");
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Petlja",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Petlja ::= WHILE Izraz error Naredba 
            {
              Object RESULT =null;
		
               System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                   "Nedostaje 'do'.");
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Petlja",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Petlja ::= WHILE Izraz DO Naredba 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 21." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Petlja",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Izlaz ::= OUTPUT error Izraz RIGHTPAR SEMI 
            {
              Object RESULT =null;
		
                   System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                       "Nedostaje '('.");
                   parser.errNo++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izlaz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Izlaz ::= OUTPUT LEFTPAR Izraz RIGHTPAR error 
            {
              Object RESULT =null;
		
                 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                     "Nedostaje ';'.");
                 parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izlaz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Izlaz ::= OUTPUT LEFTPAR Izraz error 
            {
              Object RESULT =null;
		
                   System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                       "Nedostaje ')'.");
                   parser.errNo++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izlaz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Izlaz ::= OUTPUT LEFTPAR Izraz error SEMI 
            {
              Object RESULT =null;
		
                 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                     "Nedostaje ')'.");
                 parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izlaz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Izlaz ::= OUTPUT LEFTPAR Izraz RIGHTPAR SEMI 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 20." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izlaz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ulaz ::= INPUT error ID RIGHTPAR SEMI 
            {
              Object RESULT =null;
		
                  System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                      "Nedostaje '('.");
                  parser.errNo++;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ulaz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ulaz ::= INPUT LEFTPAR ID error 
            {
              Object RESULT =null;
		
                 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                     "Nedostaje ')'.");
                 parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ulaz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ulaz ::= INPUT LEFTPAR ID RIGHTPAR error 
            {
              Object RESULT =null;
		
                 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                     "Nedostaje ';'.");
                 parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ulaz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ulaz ::= INPUT LEFTPAR ID error SEMI 
            {
              Object RESULT =null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                    "Nedostaje ')'.");
                parser.errNo++;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ulaz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ulaz ::= INPUT LEFTPAR ID RIGHTPAR SEMI 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 19." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ulaz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Dodela ::= ID error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " +
              "Nedostaje '=='.");
            parser.errNo++;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dodela",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Dodela ::= ID ASSIGN error 
            {
              Object RESULT =null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " +
                "Nekorektan izraz.");
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dodela",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Dodela ::= ID ASSIGN Izraz SEMI 
            {
              Object RESULT =null;
		
                  System.out.println( "Redukcija po smeni 18." );
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dodela",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Naredba ::= Petlja 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 17." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Naredba ::= Izlaz 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 16." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Naredba ::= Ulaz 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 15." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Naredba ::= IfNar 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 14." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Naredba ::= Blok 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 13." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Naredba ::= Dodela 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 12." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NizNar ::= Naredba 
            {
              Object RESULT =null;
		
              System.out.println( "Redukcija po smeni 11.1." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizNar",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NizNar ::= NizNar Naredba 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 11." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizNar",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Blok ::= BEGIN error 
            {
              Object RESULT =null;
		
                System.out.println("Greska u liniji " + parser.getLine() + ": " +
                    "Telo bloka je nekorektno");
                parser.errNo++;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Blok ::= BEGIN NizNar error 
            {
              Object RESULT =null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje '>'" );
              parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Blok ::= BEGIN NizNar END 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 10." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tip ::= BOOL 
            {
              Object RESULT =null;
		
                       System.out.println( "Redukcija po smeni 9." );
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tip",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tip ::= CHAR 
            {
              Object RESULT =null;
		
                       System.out.println( "Redukcija po smeni 8." );
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tip",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tip ::= INT 
            {
              Object RESULT =null;
		
                         System.out.println( "Redukcija po smeni 7." );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tip",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NizImena ::= ID 
            {
              Object RESULT =null;
		
              System.out.println( "Redukcija po smeni 6.1" );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizImena",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NizImena ::= NizImena COMMA ID 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 6." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizImena",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Deklaracija ::= error TILDE NizImena SEMI 
            {
              Object RESULT =null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje tip promenljive " );
              parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Deklaracija",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Deklaracija ::= Tip TILDE NizImena error 
            {
              Object RESULT =null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ';' " );
              parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Deklaracija",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Deklaracija ::= Tip error NizImena SEMI 
            {
              Object RESULT =null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje '~' " );
              parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Deklaracija",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Deklaracija ::= Tip TILDE NizImena SEMI 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 5." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Deklaracija",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NizDekl ::= Deklaracija 
            {
              Object RESULT =null;
		
                 System.out.println( "Redukcija po smeni 4." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizDekl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NizDekl ::= NizDekl Deklaracija 
            {
              Object RESULT =null;
		
                System.out.println( "Redukcija po smeni 3." );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizDekl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeklProm ::= VAR DOTDOT error 
            {
              Object RESULT =null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje deklaracija promenljivih" );
              parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklProm",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeklProm ::= error DOTDOT NizDekl 
            {
              Object RESULT =null;
		
                System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje var" );
                parser.errNo++;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklProm",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeklProm ::= VAR error NizDekl 
            {
              Object RESULT =null;
		
               	System.out.println("Greska u liniji " + parser.getLine() + ": " +  "Nedostaje ':' posle var" );
               parser.errNo++;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklProm",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeklProm ::= VAR DOTDOT NizDekl 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 2." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklProm",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= MAIN ARROW error DeklProm Blok RIGHTBRA 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje '[' posle maina" );
               parser.errNo++;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MAIN error LEFTBRA DeklProm Blok RIGHTBRA 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje '=>' posle maina" );
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN ARROW LEFTBRA error 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje ']' na kraju programa" );
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN ARROW LEFTBRA DeklProm Blok error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               System.out.println( "Nedostaje ']' na kraju programa" );
               parser.errNo++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN ARROW LEFTBRA DeklProm Blok RIGHTBRA 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

